openapi: 3.0.0
info:
  title: Job Offers IPC API
  description: Contract for Electron IPC communication between renderer and main process for job offer operations
  version: 1.0.0

paths:
  /api/jobs:
    get:
      summary: Get paginated and filtered list of job offers
      operationId: getJobs
      description: |
        Returns job offers matching filter criteria with pagination support.
        Implements FR-001, FR-002, FR-004, FR-006, FR-007, FR-009, FR-010.
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-indexed)
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          description: Items per page
        - name: status
          in: query
          schema:
            type: string
            enum: [new, interesting, applied, rejected, archived]
          description: Filter by job status
        - name: sourceId
          in: query
          schema:
            type: integer
          description: Filter by job source ID
        - name: postedDateFrom
          in: query
          schema:
            type: string
            format: date
          description: Filter jobs posted on or after this date
        - name: postedDateTo
          in: query
          schema:
            type: string
            format: date
          description: Filter jobs posted on or before this date
        - name: matchScoreMin
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 100
          description: Filter jobs with match score >= this value
        - name: matchScoreMax
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 100
          description: Filter jobs with match score <= this value
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [postedDate, company, status, matchScore]
            default: postedDate
          description: Field to sort by
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order (ascending or descending)
      responses:
        '200':
          description: Successful response with paginated jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobOffer'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 25
                      total:
                        type: integer
                        example: 42
                      totalPages:
                        type: integer
                        example: 2
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseError'

    post:
      summary: Create a new job offer
      operationId: createJob
      description: |
        Creates a new job offer record. Implements FR-016 to FR-023, FR-024 to FR-031.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobOfferInput'
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOffer'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseError'

  /api/jobs/{id}:
    get:
      summary: Get a single job offer by ID
      operationId: getJobById
      description: Retrieves full job offer details including joined job source name.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOffer'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseError'

    put:
      summary: Update an existing job offer
      operationId: updateJob
      description: |
        Updates job offer fields. Implements FR-034 to FR-039.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobOfferInput'
      responses:
        '200':
          description: Job updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOffer'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseError'

    delete:
      summary: Delete a job offer
      operationId: deleteJob
      description: |
        Permanently deletes job offer and cascades to matching_results.
        Implements FR-040 to FR-045.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Job deleted successfully (no content)
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseError'

  /api/jobs/sources:
    get:
      summary: Get list of available job sources
      operationId: getJobSources
      description: |
        Returns all configured job sources for dropdown population.
        Implements FR-019, FR-051.
      responses:
        '200':
          description: List of job sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobSource'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseError'

  /api/jobs/status-options:
    get:
      summary: Get available job status values
      operationId: getJobStatusOptions
      description: |
        Returns enum values for job status field (for dropdown/radio buttons).
        Implements FR-013.
      responses:
        '200':
          description: List of status options
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: string
                      enum: [new, interesting, applied, rejected, archived]
                    label:
                      type: string
                      example: "New"
              example:
                - { value: "new", label: "New" }
                - { value: "interesting", label: "Interesting" }
                - { value: "applied", label: "Applied" }
                - { value: "rejected", label: "Rejected" }
                - { value: "archived", label: "Archived" }

components:
  schemas:
    JobOffer:
      type: object
      required:
        - id
        - sourceId
        - sourceName
        - title
        - company
        - postedDate
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          example: 42
        sourceId:
          type: integer
          example: 1
          description: Foreign key to job_sources
        sourceName:
          type: string
          example: "LinkedIn"
          description: Joined from job_sources table (read-only)
        title:
          type: string
          example: "Senior React Developer"
          minLength: 1
          maxLength: 500
        company:
          type: string
          example: "TechCorp GmbH"
          minLength: 1
          maxLength: 200
        url:
          type: string
          format: uri
          nullable: true
          example: "https://example.com/job/12345"
        postedDate:
          type: string
          format: date
          example: "2025-10-14"
          description: Must not be in the future
        deadline:
          type: string
          format: date
          nullable: true
          example: "2025-11-30"
          description: Must be after postedDate if provided
        location:
          type: string
          nullable: true
          example: "Berlin, Germany"
        remoteOption:
          type: string
          nullable: true
          example: "100% remote"
        salaryRange:
          type: string
          nullable: true
          example: "60k-80k EUR"
        contractType:
          type: string
          nullable: true
          example: "Full-time"
        fullText:
          type: string
          nullable: true
          description: Complete job description for AI matching
        rawImportData:
          type: string
          nullable: true
          description: Original pasted text (debugging)
        importMethod:
          type: string
          enum: [manual, ai_paste, bulk]
          nullable: true
        notes:
          type: string
          nullable: true
          description: User's personal notes
        status:
          type: string
          enum: [new, interesting, applied, rejected, archived]
          default: new
        matchScore:
          type: integer
          minimum: 0
          maximum: 100
          nullable: true
          description: Filled by matching feature (future)
        createdAt:
          type: string
          format: date-time
          example: "2025-10-14T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-14T15:45:00Z"

    JobOfferInput:
      type: object
      required:
        - sourceId
        - title
        - company
        - postedDate
      properties:
        sourceId:
          type: integer
          example: 1
        title:
          type: string
          example: "Senior React Developer"
          minLength: 1
          maxLength: 500
        company:
          type: string
          example: "TechCorp GmbH"
          minLength: 1
          maxLength: 200
        url:
          type: string
          format: uri
          nullable: true
        postedDate:
          type: string
          format: date
          example: "2025-10-14"
        deadline:
          type: string
          format: date
          nullable: true
        location:
          type: string
          nullable: true
        remoteOption:
          type: string
          nullable: true
        salaryRange:
          type: string
          nullable: true
        contractType:
          type: string
          nullable: true
        fullText:
          type: string
          nullable: true
        rawImportData:
          type: string
          nullable: true
        importMethod:
          type: string
          enum: [manual, ai_paste, bulk]
          nullable: true
        notes:
          type: string
          nullable: true
        status:
          type: string
          enum: [new, interesting, applied, rejected, archived]
          default: new

    JobSource:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "LinkedIn"
        url:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time

    ValidationError:
      type: object
      required:
        - code
        - field
        - message
      properties:
        code:
          type: string
          enum: [VALIDATION_ERROR]
        field:
          type: string
          example: "posted_date"
          description: Field name that failed validation
        message:
          type: string
          example: "Posted date cannot be in the future"
          description: User-friendly error message

    NotFoundError:
      type: object
      required:
        - code
        - entity
        - id
      properties:
        code:
          type: string
          enum: [NOT_FOUND]
        entity:
          type: string
          enum: [job_offer, job_source]
        id:
          type: integer
          example: 42

    DatabaseError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum: [DATABASE_ERROR]
        message:
          type: string
          example: "Failed to execute database query"
